local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "DucWare",
    SubTitle = "by Duck (Thanks To Fluent GUI)",
    TabWidth = 160,
    Size = UDim2.fromOffset(570, 440),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Lobby = Window:AddTab({ Title = "Lobby", Icon = "box" }),
    Game = Window:AddTab({ Title = "Game", Icon = "box" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

Fluent:Notify({
    Title = "Chào mừng",
    Content = "AnimeSaga Script Release",
    SubContent = "Try It And LOVE It", -- Optional
    Duration = 7 -- Set to nil to make the notification not disappear
})

------------- LOBBY TAB -------------
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Kiểm tra RemoteEvent Sell
local SellEvent = ReplicatedStorage:FindFirstChild("Event")
    and ReplicatedStorage.Event:FindFirstChild("ItemIven")
    and ReplicatedStorage.Event.ItemIven:FindFirstChild("Sell")

if not SellEvent or not SellEvent:IsA("RemoteEvent") then
    warn("❌ Không tìm thấy hoặc không đúng kiểu RemoteEvent: Sell")
    return
end

-- Trạng thái lựa chọn và chạy
local selectedRarities = {}
local autoSellRunning = false

-- Dropdown chọn độ hiếm
Tabs.Lobby:AddDropdown("RarityDropdown", {
    Title = "Chọn độ hiếm để Auto Sell",
    Values = {"Rare", "Epic", "Legendary", "Mythic"},
    Multi = true,
    Default = {},
    Callback = function(values)
        selectedRarities = {}
        for _, rarity in ipairs(values) do
            selectedRarities[rarity] = true
        end
        print("[Dropdown] Đã chọn:", table.concat(values, ", "))
    end
})

-- Toggle Auto Sell
Tabs.Lobby:AddToggle("AutoSellToggle", {
    Title = "Auto Sell",
    Default = false,
    Callback = function(state)
        autoSellRunning = state

        if state then
            Fluent:Notify({
                Title = "Auto Sell",
                Content = "✅ Đã bật Auto Sell!",
                Duration = 4
            })

            -- Vòng lặp Auto Sell
            task.spawn(function()
                while autoSellRunning do
                    for rarity in pairs(selectedRarities) do
                        print("[AutoSell] Bán:", rarity)
                        pcall(function()
                            SellEvent:FireServer(rarity)
                        end)
                    end
                    task.wait(2)
                end
            end)
        else
            Fluent:Notify({
                Title = "Auto Sell",
                Content = "⛔ Đã tắt Auto Sell!",
                Duration = 4
            })
        end
    end
})

-------------GAME TAB-------------
-- Auto Start Battle
local autoStart = false

Tabs.Game:AddToggle("AutoStartToggle", {
    Title = "Auto Start Battle",
    Default = false,
    Callback = function(state)
        autoStart = state

        if state then
            Fluent:Notify({
                Title = "Auto Start",
                Content = "✅ Đã bật tự động bắt đầu trận!",
                Duration = 4
            })

            task.spawn(function()
                while autoStart do
                    local startButton = game:GetService("Players").LocalPlayer
                        :WaitForChild("PlayerGui")
                        :FindFirstChild("RoomUi", true)

                    if startButton then
                        local button = startButton:FindFirstChild("StartButton", true)
                        if button and button:IsA("ImageButton") and button.Visible then
                            pcall(function()
                                firesignal(button.MouseButton1Click)
                                print("[AutoStart] Đã nhấn nút Start!")
                            end)
                        end
                    end
                    task.wait(3)
                end
            end)
        else
            Fluent:Notify({
                Title = "Auto Start",
                Content = "⛔ Đã tắt tự động bắt đầu!",
                Duration = 4
            })
        end
    end
})

local Players = game:GetService("Players") local ReplicatedStorage = game:GetService("ReplicatedStorage") local TweenService = game:GetService("TweenService") local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait() local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local autoFarm = false local autoStart = false

Tabs.Game:AddToggle("AutoFarmToggle", { Title = "✅ Auto Farm", Default = false, Callback = function(state) autoFarm = state if autoFarm then Fluent:Notify({ Title = "Auto Farm", Content = "Đã bật Auto Farm!", Duration = 4 }) task.spawn(function() while autoFarm do local mobs = workspace:FindFirstChild("Enemy") and workspace.Enemy:FindFirstChild("Mob") if mobs then for _, mob in ipairs(mobs:GetChildren()) do if mob:FindFirstChild("HumanoidRootPart") then local mobHRP = mob.HumanoidRootPart

                            local behindPosition = mobHRP.Position - (mobHRP.CFrame.LookVector * 3)
                            HumanoidRootPart.CFrame = CFrame.new(behindPosition, mobHRP.Position)

                            mouse1press()
                            wait(0.05)
                            mouse1release() 
------------- SETTINGS TAB -------------

local Colorpicker = Tabs.Settings:AddColorpicker("Colorpicker", {
    Title = "Colorpicker",
    Default = Color3.fromRGB(96, 205, 255)
})
Colorpicker:OnChanged(function()
    print("Colorpicker changed:", Colorpicker.Value)
end)
Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))

local TColorpicker = Tabs.Settings:AddColorpicker("TransparencyColorpicker", {
    Title = "Colorpicker (Transparent)",
    Description = "Can change transparency.",
    Transparency = 0,
    Default = Color3.fromRGB(96, 205, 255)
})
TColorpicker:OnChanged(function()
    print("TColorpicker changed:", TColorpicker.Value, "Transparency:", TColorpicker.Transparency)
end)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "DucWare",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
