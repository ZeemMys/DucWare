local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "DucWare",
    SubTitle = "by Duck",
    TabWidth = 160,
    Size = UDim2.fromOffset(570, 440),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Lobby = Window:AddTab({ Title = "Lobby", Icon = "box" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

Fluent:Notify({
    Title = "Notification",
    Content = "AnimeSaga Script Release",
    SubContent = "Try It And LOVE It", -- Optional
    Duration = 7 -- Set to nil to make the notification not disappear
})

------------- LOBBY TAB -------------
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SellEvent = ReplicatedStorage:WaitForChild("Event")
                        :WaitForChild("ItemIven") -- chỉnh nếu cần
                        :WaitForChild("Sell")

-- Biến lưu lựa chọn
local selectedRarities = {}  -- bảng chứa độ hiếm được chọn
local autoSellToggle = nil

-- Hàm để kiểm tra có độ hiếm nào được chọn không
local function hasSelectedRarities()
    return next(selectedRarities) ~= nil
end

-- Dropdown chọn độ hiếm (cho phép chọn nhiều)
Tabs.Lobby:AddDropdown("AutoSellDropdown", {
    Title = "Chọn độ hiếm để Auto Sell",
    Values = {"Rare", "Epic", "Legendary", "Mythical" },
    Multi = true, -- Cho phép chọn nhiều
    Default = {},
    Callback = function(values)
        -- Reset lại bảng chọn
        selectedRarities = {}
        for _, rarity in pairs(values) do
            selectedRarities[rarity] = true
        end
        print("[Dropdown] Đã chọn các độ hiếm:", table.concat(values, ", "))
    end
})

-- Toggle Auto Sell
autoSellToggle = Tabs.Lobby:AddToggle("AutoSellToggle", {
    Title = "Auto Sell",
    Default = false,
    Callback = function(enabled)
        if enabled then
            if hasSelectedRarities() then
                print("[Toggle] Bắt đầu Auto Sell với các độ hiếm:")
                for rarity in pairs(selectedRarities) do
                    print("- " .. rarity)
                    SellEvent:FireServer(rarity)
                end
            else
                warn("[Toggle] Bạn chưa chọn độ hiếm nào!")
            end
        else
            print("[Toggle] Tắt Auto Sell")
        end
    end
})

------------- SETTINGS TAB -------------

local Colorpicker = Tabs.Settings:AddColorpicker("Colorpicker", {
    Title = "Colorpicker",
    Default = Color3.fromRGB(96, 205, 255)
})
Colorpicker:OnChanged(function()
    print("Colorpicker changed:", Colorpicker.Value)
end)
Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))

local TColorpicker = Tabs.Settings:AddColorpicker("TransparencyColorpicker", {
    Title = "Colorpicker (Transparent)",
    Description = "Can change transparency.",
    Transparency = 0,
    Default = Color3.fromRGB(96, 205, 255)
})
TColorpicker:OnChanged(function()
    print("TColorpicker changed:", TColorpicker.Value, "Transparency:", TColorpicker.Transparency)
end)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
